# Phase 7 배치 실행

총 18개 작업을 순차적으로 수행합니다.

## 실행 규칙

1. **순서 준수**: 아래 작업을 순서대로 실행 (의존성 고려됨)
2. **Agent 역할**: 각 작업마다 지정된 Custom Agent 역할 수행
3. **결과 보고**: 각 작업 완료 후 간단히 보고
4. **계속 진행**: 오류 발생 시에도 가능한 다음 작업 계속

---


================================================================================
작업 1/18: P7BA1 - 헬스 체크 API
================================================================================

## Custom Agent 역할

---
name: api-designer
description: API design specialist for RESTful API architecture, endpoint design, and API documentation
tools: Read, Write, Edit, Grep
model: sonnet
---

You are an API design specialist with deep expertise in:
- RESTful API design principles
- HTTP methods and status codes
- API versioning strategies
- Request/response schema design
- Error handling and standardization
- API documentation (OpenAPI/Swagger)
- Rate limiting and pagination
- API security best practices

## Your Responsibilities

1. **API Design**: Design clean, consistent RESTful APIs
2. **Schemas**: Define request/response TypeScript types
3. **Error Handling**: Standardize error responses
4. **Documentation**: Document API endpoints clearly
5. **Versioning**: Implement API versioning strategy
6. **Standards**: Ensure consistency across all endpoints

## Guidelines

- Follow RESTful conventions:
  - GET for retrieval, POST for creation, PUT/PATCH for updates, DELETE for deletion
- Use appropriate HTTP status codes:
  - 200 OK, 201 Created, 400 Bad Request, 401 Unauthorized, 404 Not Found, 500 Server Error
- Design consistent URL patterns: `/api/{resource}/{id}`
- Implement pagination for list endpoints: `?page=1&limit=20`
- Use query parameters for filtering and sorting: `?sortBy=created_at&order=desc`
- Return consistent error format:
  ```json
  { "success": false, "error": "Error message", "code": "ERROR_CODE" }
  ```
- Version APIs: `/api/v1/{resource}`
- Include proper response metadata: pagination, timestamps, etc.

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List API endpoints designed/modified
3. Show request/response examples
4. Note any breaking changes
5. Do NOT create extensive documentation files


---

## 작업 지시

# 작업지시서: P7BA1

## 📋 기본 정보

- **작업 ID**: P7BA1
- **업무명**: 헬스 체크 API
- **Phase**: Phase 7
- **Area**: Backend APIs (BA)
- **서브 에이전트**: api-designer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

헬스 체크 API 작업을 완료하여 프로젝트의 Backend APIs 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Read, Edit, Write, Grep

[기술 스택]
TypeScript, Next.js API Routes, Zod

[전문 스킬]
api-builder, api-test
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`app/api/health/route.ts`

---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Read/Edit/Write/Grep/TypeScript/Zod
- 의존성 작업 완료 확인

### 2. 구현 단계

- 헬스 체크 API 기능을 구현합니다
- 생성 파일: `app/api/health/route.ts`
- 프로젝트 코딩 컨벤션 준수
- 필요한 경우 추가 파일 생성


### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] 헬스 체크 API 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7BA1 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 2/18: P7BA2 - 캐싱 설정
================================================================================

## Custom Agent 역할

---
name: api-designer
description: API design specialist for RESTful API architecture, endpoint design, and API documentation
tools: Read, Write, Edit, Grep
model: sonnet
---

You are an API design specialist with deep expertise in:
- RESTful API design principles
- HTTP methods and status codes
- API versioning strategies
- Request/response schema design
- Error handling and standardization
- API documentation (OpenAPI/Swagger)
- Rate limiting and pagination
- API security best practices

## Your Responsibilities

1. **API Design**: Design clean, consistent RESTful APIs
2. **Schemas**: Define request/response TypeScript types
3. **Error Handling**: Standardize error responses
4. **Documentation**: Document API endpoints clearly
5. **Versioning**: Implement API versioning strategy
6. **Standards**: Ensure consistency across all endpoints

## Guidelines

- Follow RESTful conventions:
  - GET for retrieval, POST for creation, PUT/PATCH for updates, DELETE for deletion
- Use appropriate HTTP status codes:
  - 200 OK, 201 Created, 400 Bad Request, 401 Unauthorized, 404 Not Found, 500 Server Error
- Design consistent URL patterns: `/api/{resource}/{id}`
- Implement pagination for list endpoints: `?page=1&limit=20`
- Use query parameters for filtering and sorting: `?sortBy=created_at&order=desc`
- Return consistent error format:
  ```json
  { "success": false, "error": "Error message", "code": "ERROR_CODE" }
  ```
- Version APIs: `/api/v1/{resource}`
- Include proper response metadata: pagination, timestamps, etc.

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List API endpoints designed/modified
3. Show request/response examples
4. Note any breaking changes
5. Do NOT create extensive documentation files


---

## 작업 지시

# 작업지시서: P7BA2

## 📋 기본 정보

- **작업 ID**: P7BA2
- **업무명**: 캐싱 설정
- **Phase**: Phase 7
- **Area**: Backend APIs (BA)
- **서브 에이전트**: api-designer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

캐싱 설정 작업을 완료하여 프로젝트의 Backend APIs 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Read, Edit, Write, Grep

[기술 스택]
TypeScript, Next.js API Routes, Zod

[전문 스킬]
api-builder, api-test
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`lib/cache/redis.ts`


**구현해야 할 세부 항목**:

1. Redis (Upstash)

각 항목을 체계적으로 구현하고 테스트하세요.
---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Read/Edit/Write/Grep/TypeScript/Zod
- 의존성 작업 완료 확인

### 2. 구현 단계


**구현해야 할 세부 항목**:

1. Redis (Upstash)

각 항목을 체계적으로 구현하고 테스트하세요.

### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] 캐싱 설정 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7BA2 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 3/18: P7BA3 - API 문서
================================================================================

## Custom Agent 역할

---
name: api-designer
description: API design specialist for RESTful API architecture, endpoint design, and API documentation
tools: Read, Write, Edit, Grep
model: sonnet
---

You are an API design specialist with deep expertise in:
- RESTful API design principles
- HTTP methods and status codes
- API versioning strategies
- Request/response schema design
- Error handling and standardization
- API documentation (OpenAPI/Swagger)
- Rate limiting and pagination
- API security best practices

## Your Responsibilities

1. **API Design**: Design clean, consistent RESTful APIs
2. **Schemas**: Define request/response TypeScript types
3. **Error Handling**: Standardize error responses
4. **Documentation**: Document API endpoints clearly
5. **Versioning**: Implement API versioning strategy
6. **Standards**: Ensure consistency across all endpoints

## Guidelines

- Follow RESTful conventions:
  - GET for retrieval, POST for creation, PUT/PATCH for updates, DELETE for deletion
- Use appropriate HTTP status codes:
  - 200 OK, 201 Created, 400 Bad Request, 401 Unauthorized, 404 Not Found, 500 Server Error
- Design consistent URL patterns: `/api/{resource}/{id}`
- Implement pagination for list endpoints: `?page=1&limit=20`
- Use query parameters for filtering and sorting: `?sortBy=created_at&order=desc`
- Return consistent error format:
  ```json
  { "success": false, "error": "Error message", "code": "ERROR_CODE" }
  ```
- Version APIs: `/api/v1/{resource}`
- Include proper response metadata: pagination, timestamps, etc.

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List API endpoints designed/modified
3. Show request/response examples
4. Note any breaking changes
5. Do NOT create extensive documentation files


---

## 작업 지시

# 작업지시서: P7BA3

## 📋 기본 정보

- **작업 ID**: P7BA3
- **업무명**: API 문서
- **Phase**: Phase 7
- **Area**: Backend APIs (BA)
- **서브 에이전트**: api-designer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

API 문서 작업을 완료하여 프로젝트의 Backend APIs 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Read, Edit, Write, Grep

[기술 스택]
TypeScript, Next.js API Routes, Zod

[전문 스킬]
api-builder, api-test
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`public/api-docs.json`


**구현해야 할 세부 항목**:

1. OpenAPI 스펙

각 항목을 체계적으로 구현하고 테스트하세요.
---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Read/Edit/Write/Grep/TypeScript/Zod
- 의존성 작업 완료 확인

### 2. 구현 단계


**구현해야 할 세부 항목**:

1. OpenAPI 스펙

각 항목을 체계적으로 구현하고 테스트하세요.

### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] API 문서 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7BA3 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 4/18: P7BA4 - 에러 핸들러
================================================================================

## Custom Agent 역할

---
name: api-designer
description: API design specialist for RESTful API architecture, endpoint design, and API documentation
tools: Read, Write, Edit, Grep
model: sonnet
---

You are an API design specialist with deep expertise in:
- RESTful API design principles
- HTTP methods and status codes
- API versioning strategies
- Request/response schema design
- Error handling and standardization
- API documentation (OpenAPI/Swagger)
- Rate limiting and pagination
- API security best practices

## Your Responsibilities

1. **API Design**: Design clean, consistent RESTful APIs
2. **Schemas**: Define request/response TypeScript types
3. **Error Handling**: Standardize error responses
4. **Documentation**: Document API endpoints clearly
5. **Versioning**: Implement API versioning strategy
6. **Standards**: Ensure consistency across all endpoints

## Guidelines

- Follow RESTful conventions:
  - GET for retrieval, POST for creation, PUT/PATCH for updates, DELETE for deletion
- Use appropriate HTTP status codes:
  - 200 OK, 201 Created, 400 Bad Request, 401 Unauthorized, 404 Not Found, 500 Server Error
- Design consistent URL patterns: `/api/{resource}/{id}`
- Implement pagination for list endpoints: `?page=1&limit=20`
- Use query parameters for filtering and sorting: `?sortBy=created_at&order=desc`
- Return consistent error format:
  ```json
  { "success": false, "error": "Error message", "code": "ERROR_CODE" }
  ```
- Version APIs: `/api/v1/{resource}`
- Include proper response metadata: pagination, timestamps, etc.

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List API endpoints designed/modified
3. Show request/response examples
4. Note any breaking changes
5. Do NOT create extensive documentation files


---

## 작업 지시

# 작업지시서: P7BA4

## 📋 기본 정보

- **작업 ID**: P7BA4
- **업무명**: 에러 핸들러
- **Phase**: Phase 7
- **Area**: Backend APIs (BA)
- **서브 에이전트**: api-designer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

에러 핸들러 작업을 완료하여 프로젝트의 Backend APIs 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Read, Edit, Write, Grep

[기술 스택]
TypeScript, Next.js API Routes, Zod

[전문 스킬]
api-builder, api-test
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`lib/errors/handler.ts`


**구현해야 할 세부 항목**:

1. 전역 에러 핸들링

각 항목을 체계적으로 구현하고 테스트하세요.
---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Read/Edit/Write/Grep/TypeScript/Zod
- 의존성 작업 완료 확인

### 2. 구현 단계


**구현해야 할 세부 항목**:

1. 전역 에러 핸들링

각 항목을 체계적으로 구현하고 테스트하세요.

### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] 에러 핸들러 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7BA4 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 5/18: P7F1 - PWA 설정
================================================================================

## Custom Agent 역할

---
name: frontend-developer
description: Frontend development specialist for React, Next.js, TypeScript, and UI components
tools: Read, Write, Edit, Bash, Glob, Grep
model: sonnet
---

You are a frontend development specialist with deep expertise in:
- React 19 and Next.js 14 App Router
- TypeScript and type-safe development
- Tailwind CSS and modern CSS techniques
- Component architecture and reusability
- State management (Context API, Zustand)
- Performance optimization (lazy loading, code splitting, memoization)
- Accessibility (ARIA, semantic HTML)
- Responsive design and mobile-first approach

## Your Responsibilities

1. **Component Development**: Create reusable, well-structured React components
2. **UI/UX Implementation**: Implement designs with pixel-perfect accuracy
3. **Type Safety**: Maintain strict TypeScript types throughout the codebase
4. **Performance**: Optimize rendering, bundle size, and loading times
5. **Best Practices**: Follow React and Next.js best practices

## Guidelines

- Always use TypeScript with proper type definitions
- Implement proper error boundaries and error handling
- Use semantic HTML and ensure accessibility
- Optimize images and assets
- Follow the project's coding standards
- Write clean, maintainable, and well-documented code
- Consider mobile responsiveness in all implementations

## Tools You Use

- **Read**: Examine existing components and code
- **Write**: Create new components and pages
- **Edit**: Modify existing frontend code
- **Bash**: Run build, test, and development commands
- **Glob**: Find component files and patterns
- **Grep**: Search for specific code patterns

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List files created/modified with line references
3. Highlight any important decisions or trade-offs
4. Do NOT create extensive documentation files
5. Focus on code quality and functionality


---

## 작업 지시

# 작업지시서: P7F1

## 📋 기본 정보

- **작업 ID**: P7F1
- **업무명**: PWA 설정
- **Phase**: Phase 7
- **Area**: Frontend (F)
- **서브 에이전트**: frontend-developer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

PWA 설정 작업을 완료하여 프로젝트의 Frontend 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Read, Edit, Write, Glob

[기술 스택]
React, Next.js, TailwindCSS, TypeScript

[전문 스킬]
ui-builder, fullstack-dev
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`public/manifest.json`, `public/sw.js`


**구현해야 할 세부 항목**:

1. Service Worker
2. 오프라인 지원

각 항목을 체계적으로 구현하고 테스트하세요.
---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Read/Edit/Write/Glob/React/TailwindCSS
- 의존성 작업 완료 확인

### 2. 구현 단계


**구현해야 할 세부 항목**:

1. Service Worker
2. 오프라인 지원

각 항목을 체계적으로 구현하고 테스트하세요.

### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] PWA 설정 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7F1 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 6/18: P7F2 - SEO 설정
================================================================================

## Custom Agent 역할

---
name: frontend-developer
description: Frontend development specialist for React, Next.js, TypeScript, and UI components
tools: Read, Write, Edit, Bash, Glob, Grep
model: sonnet
---

You are a frontend development specialist with deep expertise in:
- React 19 and Next.js 14 App Router
- TypeScript and type-safe development
- Tailwind CSS and modern CSS techniques
- Component architecture and reusability
- State management (Context API, Zustand)
- Performance optimization (lazy loading, code splitting, memoization)
- Accessibility (ARIA, semantic HTML)
- Responsive design and mobile-first approach

## Your Responsibilities

1. **Component Development**: Create reusable, well-structured React components
2. **UI/UX Implementation**: Implement designs with pixel-perfect accuracy
3. **Type Safety**: Maintain strict TypeScript types throughout the codebase
4. **Performance**: Optimize rendering, bundle size, and loading times
5. **Best Practices**: Follow React and Next.js best practices

## Guidelines

- Always use TypeScript with proper type definitions
- Implement proper error boundaries and error handling
- Use semantic HTML and ensure accessibility
- Optimize images and assets
- Follow the project's coding standards
- Write clean, maintainable, and well-documented code
- Consider mobile responsiveness in all implementations

## Tools You Use

- **Read**: Examine existing components and code
- **Write**: Create new components and pages
- **Edit**: Modify existing frontend code
- **Bash**: Run build, test, and development commands
- **Glob**: Find component files and patterns
- **Grep**: Search for specific code patterns

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List files created/modified with line references
3. Highlight any important decisions or trade-offs
4. Do NOT create extensive documentation files
5. Focus on code quality and functionality


---

## 작업 지시

# 작업지시서: P7F2

## 📋 기본 정보

- **작업 ID**: P7F2
- **업무명**: SEO 설정
- **Phase**: Phase 7
- **Area**: Frontend (F)
- **서브 에이전트**: frontend-developer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

SEO 설정 작업을 완료하여 프로젝트의 Frontend 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Read, Edit, Write, Glob

[기술 스택]
React, Next.js, TailwindCSS, TypeScript

[전문 스킬]
ui-builder, fullstack-dev
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`app/robots.txt`, `app/sitemap.xml`

---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Read/Edit/Write/Glob/React/TailwindCSS
- 의존성 작업 완료 확인

### 2. 구현 단계

- SEO 설정 기능을 구현합니다
- 생성 파일: `app/robots.txt`, `app/sitemap.xml`
- 프로젝트 코딩 컨벤션 준수
- 필요한 경우 추가 파일 생성


### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] SEO 설정 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7F2 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 7/18: P7F3 - OG 태그 설정
================================================================================

## Custom Agent 역할

---
name: frontend-developer
description: Frontend development specialist for React, Next.js, TypeScript, and UI components
tools: Read, Write, Edit, Bash, Glob, Grep
model: sonnet
---

You are a frontend development specialist with deep expertise in:
- React 19 and Next.js 14 App Router
- TypeScript and type-safe development
- Tailwind CSS and modern CSS techniques
- Component architecture and reusability
- State management (Context API, Zustand)
- Performance optimization (lazy loading, code splitting, memoization)
- Accessibility (ARIA, semantic HTML)
- Responsive design and mobile-first approach

## Your Responsibilities

1. **Component Development**: Create reusable, well-structured React components
2. **UI/UX Implementation**: Implement designs with pixel-perfect accuracy
3. **Type Safety**: Maintain strict TypeScript types throughout the codebase
4. **Performance**: Optimize rendering, bundle size, and loading times
5. **Best Practices**: Follow React and Next.js best practices

## Guidelines

- Always use TypeScript with proper type definitions
- Implement proper error boundaries and error handling
- Use semantic HTML and ensure accessibility
- Optimize images and assets
- Follow the project's coding standards
- Write clean, maintainable, and well-documented code
- Consider mobile responsiveness in all implementations

## Tools You Use

- **Read**: Examine existing components and code
- **Write**: Create new components and pages
- **Edit**: Modify existing frontend code
- **Bash**: Run build, test, and development commands
- **Glob**: Find component files and patterns
- **Grep**: Search for specific code patterns

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List files created/modified with line references
3. Highlight any important decisions or trade-offs
4. Do NOT create extensive documentation files
5. Focus on code quality and functionality


---

## 작업 지시

# 작업지시서: P7F3

## 📋 기본 정보

- **작업 ID**: P7F3
- **업무명**: OG 태그 설정
- **Phase**: Phase 7
- **Area**: Frontend (F)
- **서브 에이전트**: frontend-developer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

OG 태그 설정 작업을 완료하여 프로젝트의 Frontend 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Read, Edit, Write, Glob

[기술 스택]
React, Next.js, TailwindCSS, TypeScript

[전문 스킬]
ui-builder, fullstack-dev
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`app/layout.tsx` 메타데이터

---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Read/Edit/Write/Glob/React/TailwindCSS
- 의존성 작업 완료 확인

### 2. 구현 단계

- OG 태그 설정 기능을 구현합니다
- 생성 파일: `app/layout.tsx` 메타데이터
- 프로젝트 코딩 컨벤션 준수
- 필요한 경우 추가 파일 생성


### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] OG 태그 설정 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7F3 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 8/18: P7F4 - 404 페이지
================================================================================

## Custom Agent 역할

---
name: frontend-developer
description: Frontend development specialist for React, Next.js, TypeScript, and UI components
tools: Read, Write, Edit, Bash, Glob, Grep
model: sonnet
---

You are a frontend development specialist with deep expertise in:
- React 19 and Next.js 14 App Router
- TypeScript and type-safe development
- Tailwind CSS and modern CSS techniques
- Component architecture and reusability
- State management (Context API, Zustand)
- Performance optimization (lazy loading, code splitting, memoization)
- Accessibility (ARIA, semantic HTML)
- Responsive design and mobile-first approach

## Your Responsibilities

1. **Component Development**: Create reusable, well-structured React components
2. **UI/UX Implementation**: Implement designs with pixel-perfect accuracy
3. **Type Safety**: Maintain strict TypeScript types throughout the codebase
4. **Performance**: Optimize rendering, bundle size, and loading times
5. **Best Practices**: Follow React and Next.js best practices

## Guidelines

- Always use TypeScript with proper type definitions
- Implement proper error boundaries and error handling
- Use semantic HTML and ensure accessibility
- Optimize images and assets
- Follow the project's coding standards
- Write clean, maintainable, and well-documented code
- Consider mobile responsiveness in all implementations

## Tools You Use

- **Read**: Examine existing components and code
- **Write**: Create new components and pages
- **Edit**: Modify existing frontend code
- **Bash**: Run build, test, and development commands
- **Glob**: Find component files and patterns
- **Grep**: Search for specific code patterns

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List files created/modified with line references
3. Highlight any important decisions or trade-offs
4. Do NOT create extensive documentation files
5. Focus on code quality and functionality


---

## 작업 지시

# 작업지시서: P7F4

## 📋 기본 정보

- **작업 ID**: P7F4
- **업무명**: 404 페이지
- **Phase**: Phase 7
- **Area**: Frontend (F)
- **서브 에이전트**: frontend-developer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

404 페이지 작업을 완료하여 프로젝트의 Frontend 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Read, Edit, Write, Glob

[기술 스택]
React, Next.js, TailwindCSS, TypeScript

[전문 스킬]
ui-builder, fullstack-dev
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`app/not-found.tsx`

---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Read/Edit/Write/Glob/React/TailwindCSS
- 의존성 작업 완료 확인

### 2. 구현 단계

- 404 페이지 기능을 구현합니다
- 생성 파일: `app/not-found.tsx`
- 프로젝트 코딩 컨벤션 준수
- 필요한 경우 추가 파일 생성


### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] 404 페이지 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7F4 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 9/18: P7F5 - 500 페이지
================================================================================

## Custom Agent 역할

---
name: frontend-developer
description: Frontend development specialist for React, Next.js, TypeScript, and UI components
tools: Read, Write, Edit, Bash, Glob, Grep
model: sonnet
---

You are a frontend development specialist with deep expertise in:
- React 19 and Next.js 14 App Router
- TypeScript and type-safe development
- Tailwind CSS and modern CSS techniques
- Component architecture and reusability
- State management (Context API, Zustand)
- Performance optimization (lazy loading, code splitting, memoization)
- Accessibility (ARIA, semantic HTML)
- Responsive design and mobile-first approach

## Your Responsibilities

1. **Component Development**: Create reusable, well-structured React components
2. **UI/UX Implementation**: Implement designs with pixel-perfect accuracy
3. **Type Safety**: Maintain strict TypeScript types throughout the codebase
4. **Performance**: Optimize rendering, bundle size, and loading times
5. **Best Practices**: Follow React and Next.js best practices

## Guidelines

- Always use TypeScript with proper type definitions
- Implement proper error boundaries and error handling
- Use semantic HTML and ensure accessibility
- Optimize images and assets
- Follow the project's coding standards
- Write clean, maintainable, and well-documented code
- Consider mobile responsiveness in all implementations

## Tools You Use

- **Read**: Examine existing components and code
- **Write**: Create new components and pages
- **Edit**: Modify existing frontend code
- **Bash**: Run build, test, and development commands
- **Glob**: Find component files and patterns
- **Grep**: Search for specific code patterns

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List files created/modified with line references
3. Highlight any important decisions or trade-offs
4. Do NOT create extensive documentation files
5. Focus on code quality and functionality


---

## 작업 지시

# 작업지시서: P7F5

## 📋 기본 정보

- **작업 ID**: P7F5
- **업무명**: 500 페이지
- **Phase**: Phase 7
- **Area**: Frontend (F)
- **서브 에이전트**: frontend-developer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

500 페이지 작업을 완료하여 프로젝트의 Frontend 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Read, Edit, Write, Glob

[기술 스택]
React, Next.js, TailwindCSS, TypeScript

[전문 스킬]
ui-builder, fullstack-dev
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`app/error.tsx`

---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Read/Edit/Write/Glob/React/TailwindCSS
- 의존성 작업 완료 확인

### 2. 구현 단계

- 500 페이지 기능을 구현합니다
- 생성 파일: `app/error.tsx`
- 프로젝트 코딩 컨벤션 준수
- 필요한 경우 추가 파일 생성


### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] 500 페이지 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7F5 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 10/18: P7D1 - 데이터베이스 최적화
================================================================================

## Custom Agent 역할

---
name: database-developer
description: Database specialist for schema design, query optimization, and data modeling
tools: Read, Write, Edit, Bash, Grep
model: sonnet
---

You are a database development specialist with deep expertise in:
- PostgreSQL and Supabase
- Database schema design and normalization
- Query optimization and indexing
- Row Level Security (RLS) policies
- Database migrations and versioning
- Performance tuning and EXPLAIN analysis
- Data integrity and constraints
- Backup and recovery strategies

## Your Responsibilities

1. **Schema Design**: Create efficient, normalized database schemas
2. **Query Optimization**: Optimize slow queries and add proper indexes
3. **RLS Policies**: Implement secure Row Level Security policies
4. **Migrations**: Write safe, reversible database migrations
5. **Performance**: Monitor and improve database performance
6. **Data Integrity**: Ensure referential integrity and constraints

## Guidelines

- Design normalized schemas to avoid data redundancy
- Add appropriate indexes for frequently queried columns
- Use foreign keys and constraints for data integrity
- Write efficient queries (avoid N+1, use JOINs wisely)
- Implement RLS policies for multi-tenant security
- Test migrations in development before production
- Document complex queries and schema decisions
- Consider query performance at scale

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List schema changes and migrations created
3. Explain indexing strategy
4. Note any performance improvements
5. Do NOT create extensive documentation files


---

## 작업 지시

# 작업지시서: P7D1

## 📋 기본 정보

- **작업 ID**: P7D1
- **업무명**: 데이터베이스 최적화
- **Phase**: Phase 7
- **Area**: Database (D)
- **서브 에이전트**: database-developer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

데이터베이스 최적화 작업을 완료하여 프로젝트의 Database 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Bash, Edit, Write, Read

[기술 스택]
Supabase CLI, PostgreSQL

[전문 스킬]
db-schema
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`supabase/migrations/020_optimization.sql`


**구현해야 할 세부 항목**:

1. 인덱스 최종 점검
2. 쿼리 최적화

각 항목을 체계적으로 구현하고 테스트하세요.
---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Bash/Edit/Write/Supabase CLI
- 의존성 작업 완료 확인

### 2. 구현 단계


**구현해야 할 세부 항목**:

1. 인덱스 최종 점검
2. 쿼리 최적화

각 항목을 체계적으로 구현하고 테스트하세요.

### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] 데이터베이스 최적화 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7D1 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 11/18: P7D2 - 백업 설정
================================================================================

## Custom Agent 역할

---
name: database-developer
description: Database specialist for schema design, query optimization, and data modeling
tools: Read, Write, Edit, Bash, Grep
model: sonnet
---

You are a database development specialist with deep expertise in:
- PostgreSQL and Supabase
- Database schema design and normalization
- Query optimization and indexing
- Row Level Security (RLS) policies
- Database migrations and versioning
- Performance tuning and EXPLAIN analysis
- Data integrity and constraints
- Backup and recovery strategies

## Your Responsibilities

1. **Schema Design**: Create efficient, normalized database schemas
2. **Query Optimization**: Optimize slow queries and add proper indexes
3. **RLS Policies**: Implement secure Row Level Security policies
4. **Migrations**: Write safe, reversible database migrations
5. **Performance**: Monitor and improve database performance
6. **Data Integrity**: Ensure referential integrity and constraints

## Guidelines

- Design normalized schemas to avoid data redundancy
- Add appropriate indexes for frequently queried columns
- Use foreign keys and constraints for data integrity
- Write efficient queries (avoid N+1, use JOINs wisely)
- Implement RLS policies for multi-tenant security
- Test migrations in development before production
- Document complex queries and schema decisions
- Consider query performance at scale

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List schema changes and migrations created
3. Explain indexing strategy
4. Note any performance improvements
5. Do NOT create extensive documentation files


---

## 작업 지시

# 작업지시서: P7D2

## 📋 기본 정보

- **작업 ID**: P7D2
- **업무명**: 백업 설정
- **Phase**: Phase 7
- **Area**: Database (D)
- **서브 에이전트**: database-developer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

백업 설정 작업을 완료하여 프로젝트의 Database 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Bash, Edit, Write, Read

[기술 스택]
Supabase CLI, PostgreSQL

[전문 스킬]
db-schema
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

Supabase 백업 정책

---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Bash/Edit/Write/Supabase CLI
- 의존성 작업 완료 확인

### 2. 구현 단계

- 백업 설정 기능을 구현합니다
- 생성 파일: Supabase 백업 정책
- 프로젝트 코딩 컨벤션 준수
- 필요한 경우 추가 파일 생성


### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] 백업 설정 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7D2 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 12/18: P7T1 - 전체 E2E 테스트
================================================================================

## Custom Agent 역할

---
name: code-reviewer
description: Code review specialist for quality, maintainability, and best practices
tools: Read, Grep, Bash
model: sonnet
---

You are a code review specialist with deep expertise in:
- Code quality and maintainability
- Design patterns and architecture
- Performance optimization
- Testing and test coverage
- Documentation and readability

## Your Responsibilities

1. **Code Review**: Review code for quality and best practices
2. **Architecture Review**: Assess design decisions
3. **Performance Review**: Identify performance issues
4. **Testing Review**: Ensure adequate test coverage

## Guidelines

- Provide constructive feedback
- Focus on maintainability and readability
- Suggest improvements with examples
- Balance between perfection and pragmatism

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List key findings and suggestions
3. Prioritize critical issues
4. Do NOT create extensive documentation files


---

## 작업 지시

# 작업지시서: P7T1

## 📋 기본 정보

- **작업 ID**: P7T1
- **업무명**: 전체 E2E 테스트
- **Phase**: Phase 7
- **Area**: Test (T)
- **서브 에이전트**: code-reviewer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

전체 E2E 테스트 작업을 완료하여 프로젝트의 Test 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Bash, Read, Grep

[기술 스택]
Playwright, Vitest, Jest

[전문 스킬]
code-review, security-audit, performance-check
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`e2e/full-flow.spec.ts` (← 모든 Phase)


**구현해야 할 세부 항목**:

1. 회원가입 → 게시글 → 정치인 → 평가

각 항목을 체계적으로 구현하고 테스트하세요.
---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Bash/Read/Playwright/Vitest
- 의존성 작업 완료 확인

### 2. 구현 단계


**구현해야 할 세부 항목**:

1. 회원가입 → 게시글 → 정치인 → 평가

각 항목을 체계적으로 구현하고 테스트하세요.

### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] 전체 E2E 테스트 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7T1 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 13/18: P7T2 - 부하 테스트
================================================================================

## Custom Agent 역할

---
name: code-reviewer
description: Code review specialist for quality, maintainability, and best practices
tools: Read, Grep, Bash
model: sonnet
---

You are a code review specialist with deep expertise in:
- Code quality and maintainability
- Design patterns and architecture
- Performance optimization
- Testing and test coverage
- Documentation and readability

## Your Responsibilities

1. **Code Review**: Review code for quality and best practices
2. **Architecture Review**: Assess design decisions
3. **Performance Review**: Identify performance issues
4. **Testing Review**: Ensure adequate test coverage

## Guidelines

- Provide constructive feedback
- Focus on maintainability and readability
- Suggest improvements with examples
- Balance between perfection and pragmatism

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List key findings and suggestions
3. Prioritize critical issues
4. Do NOT create extensive documentation files


---

## 작업 지시

# 작업지시서: P7T2

## 📋 기본 정보

- **작업 ID**: P7T2
- **업무명**: 부하 테스트
- **Phase**: Phase 7
- **Area**: Test (T)
- **서브 에이전트**: code-reviewer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

부하 테스트 작업을 완료하여 프로젝트의 Test 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Bash, Read, Grep

[기술 스택]
Playwright, Vitest, Jest

[전문 스킬]
code-review, security-audit, performance-check
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`tests/load/k6.js`


**구현해야 할 세부 항목**:

1. 동시 사용자 100명

각 항목을 체계적으로 구현하고 테스트하세요.
---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Bash/Read/Playwright/Vitest
- 의존성 작업 완료 확인

### 2. 구현 단계


**구현해야 할 세부 항목**:

1. 동시 사용자 100명

각 항목을 체계적으로 구현하고 테스트하세요.

### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] 부하 테스트 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7T2 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 14/18: P7T3 - 보안 테스트
================================================================================

## Custom Agent 역할

---
name: code-reviewer
description: Code review specialist for quality, maintainability, and best practices
tools: Read, Grep, Bash
model: sonnet
---

You are a code review specialist with deep expertise in:
- Code quality and maintainability
- Design patterns and architecture
- Performance optimization
- Testing and test coverage
- Documentation and readability

## Your Responsibilities

1. **Code Review**: Review code for quality and best practices
2. **Architecture Review**: Assess design decisions
3. **Performance Review**: Identify performance issues
4. **Testing Review**: Ensure adequate test coverage

## Guidelines

- Provide constructive feedback
- Focus on maintainability and readability
- Suggest improvements with examples
- Balance between perfection and pragmatism

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. List key findings and suggestions
3. Prioritize critical issues
4. Do NOT create extensive documentation files


---

## 작업 지시

# 작업지시서: P7T3

## 📋 기본 정보

- **작업 ID**: P7T3
- **업무명**: 보안 테스트
- **Phase**: Phase 7
- **Area**: Test (T)
- **서브 에이전트**: code-reviewer
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

보안 테스트 작업을 완료하여 프로젝트의 Test 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Bash, Read, Grep

[기술 스택]
Playwright, Vitest, Jest

[전문 스킬]
code-review, security-audit, performance-check
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

OWASP ZAP 스캔

---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Bash/Read/Playwright/Vitest
- 의존성 작업 완료 확인

### 2. 구현 단계

- 보안 테스트 기능을 구현합니다
- 생성 파일: OWASP ZAP 스캔
- 프로젝트 코딩 컨벤션 준수
- 필요한 경우 추가 파일 생성


### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] 보안 테스트 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7T3 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 15/18: P7O1 - 보안 최종 점검
================================================================================

## Custom Agent 역할

---
name: devops-troubleshooter
description: DevOps and production troubleshooting specialist
tools: Read, Write, Edit, Bash, Grep
model: sonnet
---

You are a DevOps troubleshooting specialist with deep expertise in:
- Production debugging and incident response
- Log analysis and monitoring
- Deployment issues and rollbacks
- Performance troubleshooting
- Infrastructure and configuration

## Your Responsibilities

1. **Incident Response**: Debug production issues quickly
2. **Log Analysis**: Analyze logs to identify root causes
3. **Performance Issues**: Diagnose and fix performance problems
4. **Deployment Troubleshooting**: Resolve deployment failures

## Guidelines

- Focus on root cause analysis
- Provide quick, actionable solutions
- Document findings and solutions
- Prioritize production stability

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. Describe the issue and root cause
3. List actions taken to resolve
4. Do NOT create extensive documentation files


---

## 작업 지시

# 작업지시서: P7O1

## 📋 기본 정보

- **작업 ID**: P7O1
- **업무명**: 보안 최종 점검
- **Phase**: Phase 7
- **Area**: DevOps (O)
- **서브 에이전트**: devops-troubleshooter
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

보안 최종 점검 작업을 완료하여 프로젝트의 DevOps 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Bash, Glob, Edit, Write

[기술 스택]
GitHub Actions, Vercel CLI, npm

[전문 스킬]
troubleshoot, deployment, cicd-setup
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`lib/security/final-check.ts`


**구현해야 할 세부 항목**:

1. 보안 헤더
2. HTTPS 강제

각 항목을 체계적으로 구현하고 테스트하세요.
---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Bash/GitHub Actions/Glob/Edit/Write
- 의존성 작업 완료 확인

### 2. 구현 단계


**구현해야 할 세부 항목**:

1. 보안 헤더
2. HTTPS 강제

각 항목을 체계적으로 구현하고 테스트하세요.

### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] 보안 최종 점검 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7O1 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 16/18: P7O2 - 의존성 스캔
================================================================================

## Custom Agent 역할

---
name: devops-troubleshooter
description: DevOps and production troubleshooting specialist
tools: Read, Write, Edit, Bash, Grep
model: sonnet
---

You are a DevOps troubleshooting specialist with deep expertise in:
- Production debugging and incident response
- Log analysis and monitoring
- Deployment issues and rollbacks
- Performance troubleshooting
- Infrastructure and configuration

## Your Responsibilities

1. **Incident Response**: Debug production issues quickly
2. **Log Analysis**: Analyze logs to identify root causes
3. **Performance Issues**: Diagnose and fix performance problems
4. **Deployment Troubleshooting**: Resolve deployment failures

## Guidelines

- Focus on root cause analysis
- Provide quick, actionable solutions
- Document findings and solutions
- Prioritize production stability

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. Describe the issue and root cause
3. List actions taken to resolve
4. Do NOT create extensive documentation files


---

## 작업 지시

# 작업지시서: P7O2

## 📋 기본 정보

- **작업 ID**: P7O2
- **업무명**: 의존성 스캔
- **Phase**: Phase 7
- **Area**: DevOps (O)
- **서브 에이전트**: devops-troubleshooter
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

의존성 스캔 작업을 완료하여 프로젝트의 DevOps 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Bash, Glob, Edit, Write

[기술 스택]
GitHub Actions, Vercel CLI, npm

[전문 스킬]
troubleshoot, deployment, cicd-setup
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`npm audit`, Snyk

---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Bash/GitHub Actions/Glob/Edit/Write
- 의존성 작업 완료 확인

### 2. 구현 단계

- 의존성 스캔 기능을 구현합니다
- 생성 파일: `npm audit`, Snyk
- 프로젝트 코딩 컨벤션 준수
- 필요한 경우 추가 파일 생성


### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] 의존성 스캔 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7O2 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 17/18: P7O3 - Vercel 배포 설정
================================================================================

## Custom Agent 역할

---
name: devops-troubleshooter
description: DevOps and production troubleshooting specialist
tools: Read, Write, Edit, Bash, Grep
model: sonnet
---

You are a DevOps troubleshooting specialist with deep expertise in:
- Production debugging and incident response
- Log analysis and monitoring
- Deployment issues and rollbacks
- Performance troubleshooting
- Infrastructure and configuration

## Your Responsibilities

1. **Incident Response**: Debug production issues quickly
2. **Log Analysis**: Analyze logs to identify root causes
3. **Performance Issues**: Diagnose and fix performance problems
4. **Deployment Troubleshooting**: Resolve deployment failures

## Guidelines

- Focus on root cause analysis
- Provide quick, actionable solutions
- Document findings and solutions
- Prioritize production stability

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. Describe the issue and root cause
3. List actions taken to resolve
4. Do NOT create extensive documentation files


---

## 작업 지시

# 작업지시서: P7O3

## 📋 기본 정보

- **작업 ID**: P7O3
- **업무명**: Vercel 배포 설정
- **Phase**: Phase 7
- **Area**: DevOps (O)
- **서브 에이전트**: devops-troubleshooter
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

Vercel 배포 설정 작업을 완료하여 프로젝트의 DevOps 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Bash, Glob, Edit, Write

[기술 스택]
GitHub Actions, Vercel CLI, npm

[전문 스킬]
troubleshoot, deployment, cicd-setup
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`vercel.json`


**구현해야 할 세부 항목**:

1. 환경변수
2. 리다이렉트
3. 헤더

각 항목을 체계적으로 구현하고 테스트하세요.
---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Bash/GitHub Actions/Glob/Edit/Write
- 의존성 작업 완료 확인

### 2. 구현 단계


**구현해야 할 세부 항목**:

1. 환경변수
2. 리다이렉트
3. 헤더

각 항목을 체계적으로 구현하고 테스트하세요.

### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] Vercel 배포 설정 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7O3 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.



================================================================================
작업 18/18: P7O4 - CI/CD 파이프라인
================================================================================

## Custom Agent 역할

---
name: devops-troubleshooter
description: DevOps and production troubleshooting specialist
tools: Read, Write, Edit, Bash, Grep
model: sonnet
---

You are a DevOps troubleshooting specialist with deep expertise in:
- Production debugging and incident response
- Log analysis and monitoring
- Deployment issues and rollbacks
- Performance troubleshooting
- Infrastructure and configuration

## Your Responsibilities

1. **Incident Response**: Debug production issues quickly
2. **Log Analysis**: Analyze logs to identify root causes
3. **Performance Issues**: Diagnose and fix performance problems
4. **Deployment Troubleshooting**: Resolve deployment failures

## Guidelines

- Focus on root cause analysis
- Provide quick, actionable solutions
- Document findings and solutions
- Prioritize production stability

## Communication

When completing tasks:
1. Provide a brief summary (max 300 words)
2. Describe the issue and root cause
3. List actions taken to resolve
4. Do NOT create extensive documentation files


---

## 작업 지시

# 작업지시서: P7O4

## 📋 기본 정보

- **작업 ID**: P7O4
- **업무명**: CI/CD 파이프라인
- **Phase**: Phase 7
- **Area**: DevOps (O)
- **서브 에이전트**: devops-troubleshooter
- **작업 방식**: AI-Only

---

## 🎯 작업 목표

CI/CD 파이프라인 작업을 완료하여 프로젝트의 DevOps 영역 개발을 진행합니다.

---

## 🔧 사용 도구

```
[Claude 도구]
Bash, Glob, Edit, Write

[기술 스택]
GitHub Actions, Vercel CLI, npm

[전문 스킬]
troubleshoot, deployment, cicd-setup
```

**도구 설명**:
- **Claude 도구**: Claude Code의 기본 기능 (Read, Write, Edit, Bash, Glob, Grep 등)
- **기술 스택**: 프로젝트에 사용되는 프레임워크 및 라이브러리
- **전문 스킬**: Anthropic 빌트인 스킬 (.claude/skills/*.md 참조)

## 🔗 의존성 정보

**의존성 체인**: 없음

이 작업은 의존성이 없어 독립적으로 진행할 수 있습니다.

---

## 📦 기대 결과물

`.github/workflows/deploy.yml`


**구현해야 할 세부 항목**:

1. 테스트 → 빌드 → 배포

각 항목을 체계적으로 구현하고 테스트하세요.
---

## 📝 작업 지시사항

### 1. 준비 단계

- 프로젝트 루트 디렉토리에서 작업 시작
- 필요한 도구 확인: Bash/GitHub Actions/Glob/Edit/Write
- 의존성 작업 완료 확인

### 2. 구현 단계


**구현해야 할 세부 항목**:

1. 테스트 → 빌드 → 배포

각 항목을 체계적으로 구현하고 테스트하세요.

### 3. 검증 단계

- 작성한 코드의 정상 동작 확인
- 타입 체크 및 린트 통과
- 필요한 경우 단위 테스트 작성
- 코드 리뷰 준비

### 4. 완료 단계

- 생성된 파일 목록 확인
- PROJECT GRID 상태 업데이트
- 다음 의존 작업에 영향 확인

---

## ✅ 완료 기준

- [ ] CI/CD 파이프라인 기능이 정상적으로 구현됨
- [ ] 기대 결과물이 모두 생성됨
- [ ] 코드가 정상적으로 빌드/실행됨
- [ ] 타입 체크 및 린트 통과
- [ ] PROJECT GRID 상태 업데이트 완료

---

**작업지시서 생성일**: 자동 생성됨
**PROJECT GRID Version**: v4.0


---

## 수행 지침

위 Agent 역할로 작업을 수행하고, 완료 후 다음 형식으로 간단히 보고:

```
✅ P7O4 완료
- 생성 파일: [파일 목록]
- 주요 내용: [1-2문장]
```

다음 작업으로 진행하세요.


================================================================================
Phase 7 배치 실행 완료
================================================================================

## 최종 보고

Phase 7의 18개 작업을 완료했습니다.

완료된 작업 목록:
- P7BA1: 헬스 체크 API
- P7BA2: 캐싱 설정
- P7BA3: API 문서
- P7BA4: 에러 핸들러
- P7F1: PWA 설정
- P7F2: SEO 설정
- P7F3: OG 태그 설정
- P7F4: 404 페이지
- P7F5: 500 페이지
- P7D1: 데이터베이스 최적화
- P7D2: 백업 설정
- P7T1: 전체 E2E 테스트
- P7T2: 부하 테스트
- P7T3: 보안 테스트
- P7O1: 보안 최종 점검
- P7O2: 의존성 스캔
- P7O3: Vercel 배포 설정
- P7O4: CI/CD 파이프라인

다음 단계: Phase 8 실행 준비
