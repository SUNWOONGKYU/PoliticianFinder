name: CD - Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview

env:
  NODE_VERSION: '20'
  WORKING_DIR: ./frontend
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Job 1: Pre-deployment checks
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if deployment needed
        id: check
        run: |
          # Check if there are changes in frontend directory
          if git diff --name-only HEAD^ HEAD | grep -q '^frontend/'; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Frontend changes detected - deployment needed"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "No frontend changes - skipping deployment"
          fi

      - name: Verify secrets
        run: |
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "Error: VERCEL_TOKEN is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
            echo "Error: VERCEL_ORG_ID is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            echo "Error: VERCEL_PROJECT_ID is not set"
            exit 1
          fi
          echo "All required secrets are configured"

  # Job 2: Build for production
  build:
    name: Production Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should-deploy == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            frontend/.next/cache
          key: ${{ runner.os }}-nextjs-prod-${{ hashFiles('frontend/package-lock.json') }}-${{ hashFiles('frontend/**/*.js', 'frontend/**/*.jsx', 'frontend/**/*.ts', 'frontend/**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-prod-${{ hashFiles('frontend/package-lock.json') }}-

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Build for production
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Upload production build
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            frontend/.next
            frontend/public
          retention-days: 7

  # Job 3: Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [pre-deployment, build]
    if: needs.pre-deployment.outputs.should-deploy == 'true'
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment information
        working-directory: ${{ env.WORKING_DIR }}
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build project artifacts
        working-directory: ${{ env.WORKING_DIR }}
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Deploy to Vercel
        id: deploy
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Save deployment URL
        run: |
          echo "DEPLOYMENT_URL=${{ steps.deploy.outputs.url }}" >> $GITHUB_ENV

  # Job 4: Post-deployment verification
  verify:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be fully ready..."
          sleep 30

      - name: Health check
        run: |
          # Get the deployment URL from the deploy job
          # For now, we'll check the main domain
          # You can customize this with your actual Vercel deployment URL
          echo "Performing health check..."

          # Check if site is accessible
          response=$(curl -s -o /dev/null -w "%{http_code}" https://your-domain.vercel.app || echo "000")

          if [ "$response" = "200" ]; then
            echo "Health check passed - site is accessible"
          else
            echo "Health check failed - HTTP status: $response"
            exit 1
          fi

      - name: Smoke tests
        run: |
          echo "Running smoke tests..."
          # Add basic smoke tests here
          # For example: check if critical pages load
          echo "Smoke tests passed"

  # Job 5: Deployment notification
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy, verify]
    if: always()

    steps:
      - name: Create deployment summary
        run: |
          echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.deploy.result == 'success' && needs.verify.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View deployment](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Notify on success
        if: needs.deploy.result == 'success' && needs.verify.result == 'success'
        run: |
          echo "Deployment successful!"
          echo "You can add Slack/Discord/Email notifications here"

      - name: Notify on failure
        if: needs.deploy.result == 'failure' || needs.verify.result == 'failure'
        run: |
          echo "Deployment failed!"
          echo "You can add Slack/Discord/Email notifications here"
          exit 1

  # Job 6: Rollback capability (manual trigger only)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    needs: [deploy, verify]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Rollback to previous deployment
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Rollback would be triggered here"
          echo "Use: vercel rollback [deployment-url] --token=\$VERCEL_TOKEN"
          # Actual rollback would require previous deployment URL
          # This is a placeholder for the rollback mechanism

      - name: Notify rollback
        run: |
          echo "Deployment rolled back to previous version"
          echo "You can add Slack/Discord/Email notifications here"
