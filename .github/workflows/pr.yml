name: PR - Pull Request Checks

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'
      - '.github/workflows/**'
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

env:
  NODE_VERSION: '20'
  WORKING_DIR: ./frontend

jobs:
  # Job 1: PR Metadata and Labels
  pr-metadata:
    name: PR Metadata Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check PR title format
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title;
            const pattern = /^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?: .+/;

            if (!pattern.test(title)) {
              core.setFailed(
                'PR title does not follow conventional commits format.\n' +
                'Expected format: type(scope): description\n' +
                'Examples:\n' +
                '  - feat(auth): add Google OAuth login\n' +
                '  - fix(ui): resolve button alignment issue\n' +
                '  - docs: update API documentation'
              );
            } else {
              console.log('PR title follows conventional commits format ✓');
            }

      - name: Auto-label based on files changed
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const labels = new Set();

            files.forEach(file => {
              if (file.filename.includes('frontend/src/components')) {
                labels.add('frontend');
                labels.add('ui');
              }
              if (file.filename.includes('frontend/e2e')) {
                labels.add('testing');
              }
              if (file.filename.includes('.github/workflows')) {
                labels.add('ci/cd');
              }
              if (file.filename.includes('frontend/src/app')) {
                labels.add('frontend');
              }
              if (file.filename.match(/\.(ts|tsx)$/)) {
                labels.add('typescript');
              }
              if (file.filename.includes('README') || file.filename.includes('.md')) {
                labels.add('documentation');
              }
            });

            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: Array.from(labels)
              });
            }

      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            let additions = 0;
            let deletions = 0;

            files.forEach(file => {
              additions += file.additions;
              deletions += file.deletions;
            });

            const totalChanges = additions + deletions;
            let sizeLabel = '';

            if (totalChanges < 100) {
              sizeLabel = 'size/xs';
            } else if (totalChanges < 300) {
              sizeLabel = 'size/s';
            } else if (totalChanges < 600) {
              sizeLabel = 'size/m';
            } else if (totalChanges < 1200) {
              sizeLabel = 'size/l';
            } else {
              sizeLabel = 'size/xl';
            }

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [sizeLabel]
            });

            console.log(`PR size: ${sizeLabel} (${totalChanges} changes)`);

  # Job 2: Code Quality Checks
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run lint

      - name: Run TypeScript compiler
        working-directory: ${{ env.WORKING_DIR }}
        run: npx tsc --noEmit

      - name: Check code formatting
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Checking code formatting..."
          # Add prettier check if you have it configured
          # npx prettier --check "src/**/*.{ts,tsx,js,jsx}"

  # Job 3: Build and Test
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            frontend/.next/cache
          key: ${{ runner.os }}-nextjs-pr-${{ github.event.pull_request.number }}-${{ hashFiles('frontend/**/*.js', 'frontend/**/*.jsx', 'frontend/**/*.ts', 'frontend/**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-pr-${{ github.event.pull_request.number }}-

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Build application
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Analyze bundle size
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Analyzing bundle size..."
          # You can add bundle size analysis here
          # For example: npx @next/bundle-analyzer

  # Job 4: Preview Deployment
  preview-deploy:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [code-quality, build-test]
    environment:
      name: preview-pr-${{ github.event.pull_request.number }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment information
        working-directory: ${{ env.WORKING_DIR }}
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build project artifacts
        working-directory: ${{ env.WORKING_DIR }}
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Deploy to Vercel Preview
        id: deploy
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Preview deployed to: $url"

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.url }}';
            const comment = `## Preview Deployment

            Your preview deployment is ready!

            **Preview URL:** ${url}

            **Environment:** Preview
            **Commit:** ${{ github.event.pull_request.head.sha }}

            This preview will be automatically updated when you push new commits to this PR.

            [View deployment logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Preview Deployment')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  # Job 5: E2E Tests on Preview
  e2e-preview:
    name: E2E Tests on Preview
    runs-on: ubuntu-latest
    needs: preview-deploy
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        project:
          - chromium-desktop

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Install Playwright Browsers
        working-directory: ${{ env.WORKING_DIR }}
        run: npx playwright install --with-deps chromium

      - name: Wait for preview deployment
        run: |
          echo "Waiting for preview deployment to be ready..."
          sleep 10

      - name: Run E2E tests on preview
        working-directory: ${{ env.WORKING_DIR }}
        run: npx playwright test --project=${{ matrix.project }}
        env:
          CI: true
          # Use preview URL if available, otherwise use localhost
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-pr-results-${{ matrix.project }}
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 7

  # Job 6: Security Checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm audit --audit-level=moderate || true

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

  # Job 7: PR Summary
  pr-summary:
    name: PR Check Summary
    runs-on: ubuntu-latest
    needs: [pr-metadata, code-quality, build-test, preview-deploy, e2e-preview, security]
    if: always() && github.event.pull_request.draft == false

    steps:
      - name: Generate PR summary
        uses: actions/github-script@v7
        with:
          script: |
            const metadataStatus = '${{ needs.pr-metadata.result }}' === 'success' ? '✅' : '❌';
            const codeQualityStatus = '${{ needs.code-quality.result }}' === 'success' ? '✅' : '❌';
            const buildTestStatus = '${{ needs.build-test.result }}' === 'success' ? '✅' : '❌';
            const previewDeployStatus = '${{ needs.preview-deploy.result }}' === 'success' ? '✅' : '❌';
            const e2eStatus = '${{ needs.e2e-preview.result }}' === 'success' ? '✅' : '❌';
            const securityStatus = '${{ needs.security.result }}' === 'success' ? '✅' : '⚠️';

            const allPassed =
              '${{ needs.pr-metadata.result }}' === 'success' &&
              '${{ needs.code-quality.result }}' === 'success' &&
              '${{ needs.build-test.result }}' === 'success' &&
              '${{ needs.preview-deploy.result }}' === 'success' &&
              '${{ needs.e2e-preview.result }}' === 'success';

            const comment = `## PR Check Results

            | Check | Status |
            |-------|--------|
            | PR Metadata | ${metadataStatus} |
            | Code Quality | ${codeQualityStatus} |
            | Build & Test | ${buildTestStatus} |
            | Preview Deploy | ${previewDeployStatus} |
            | E2E Tests | ${e2eStatus} |
            | Security Scan | ${securityStatus} |

            **Overall Status:** ${allPassed ? '✅ All checks passed' : '❌ Some checks failed'}

            ${allPassed ? '🎉 This PR is ready for review!' : '⚠️ Please fix the failing checks before requesting review.'}

            [View detailed results](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('PR Check Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Check if PR can be merged
        run: |
          if [ "${{ needs.pr-metadata.result }}" != "success" ] || \
             [ "${{ needs.code-quality.result }}" != "success" ] || \
             [ "${{ needs.build-test.result }}" != "success" ] || \
             [ "${{ needs.preview-deploy.result }}" != "success" ] || \
             [ "${{ needs.e2e-preview.result }}" != "success" ]; then
            echo "PR checks failed - blocking merge"
            exit 1
          fi

          echo "All PR checks passed - ready to merge"
